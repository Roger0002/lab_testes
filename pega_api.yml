---
- name: Playbook que brinca com API de mentirinha
  hosts: clienterhel8.transp.com
  become: True
  tasks:
    # Lista as vulnerabilidades
    - name: Atinge a API e obtem o json com as vulnerabilidades
      uri:
        url: http://192.168.122.5/api/3/vulnerabilities
        method: GET
        return_content: True
        status_code: 200
      register: json_vulnerabilidades

    - name: Gera uma LISTA com as vulnerabilidades chamada lista_vuln
      debug:
        msg: "{{ json_vulnerabilidades.content | from_json | json_query('resources[*].id') }}"
      register: lista_vuln

    # Começa a gerar a lista de IDs de assets afetados pelas vulnerabilidades
    - name: Exibe o json com os assets conhecidos pela API
      uri:
        url: http://192.168.122.5/api/3/assets
        method: GET
        return_content: True
        status_code: 200
      register: json_assets

    # Gera um LISTA contendo DICIONÁRIOS com os assets conhecidos pela API
    # Por motivos ainda a serem esclarecidos, a variável está guardando mais coisas do que deveria
    # Ela armazena, além da lista de nosso interesse, as chaves failed e changed. Então, quando
    # essa variável tiver que ser acionada, precisaremos tratar isso direto na chamada (com filtros,
    # por exemplo)
    - name: Gera um LISTA contendo DICIONÁRIOS com os assets conhecidos pela API
      debug:
        msg: "{{ json_assets.content | from_json | json_query('resources[*].{id: id, hostName: hostName}') }}"
      register: lista_assets

    # O bloco à seguir termina salvando a lista de IDs de assets na variável lista_assets_afetados.
    # Outra variável rebelde, guardando as chaves failed e when. Deve-se lembrar disso
    - name: Gera uma lista de IDs de assets afetados pelas vulnerabilidades
      block:
        - uri:
            url: http://192.168.122.5/api/3/{{ item }}/assets
            method: GET
            return_content: True
            status_code: 200
          loop: "{{ lista_vuln.msg }}"
          register: json_assets_afetados

        - debug:
            msg: "{{ json_assets_afetados | json_query('results[*].content') }}"
          register: vari1

        - debug:
            msg: "{{ item | from_json | json_query('resources') }}"
          loop: "{{ vari1.msg | json_query('[*]') }}"
          register: vari2

        - debug:
            verbosity: 0
            msg: "{{ vari2 | json_query('results[*].msg') | flatten | unique }}"
          register: lista_assets_afetados

    # Verifica se a lista de IDs de assets está vazia. Se estiver, encerra a execução do playbook
    # com erro
    - name: Verifica se a lista constante em lista_assets_afetados está vazia.
      debug:
        msg: "{{ lista_assets_afetados }}"
      failed_when: lista_assets_afetados.msg | length == 0

    - name: Cria a lista lista_hostnames_afetados, vazia
      set_fact:
        lista_hostnames_afetados: []

    - name: Faz um laço na lista de IDs de assets afetados e gera a lista de hostnames afetados
      loop: "{{ lista_assets.msg }}"
      set_fact:
        lista_hostnames_afetados: "{{ lista_hostnames_afetados + [item.hostName] }}"
      when: item.id in lista_assets_afetados.msg 
    
- name: Play de teste
  hosts: "{{ lista_hostnames_afetados[0] }}"
  tasks:
    - name: Vamos ver se chegamos lá
      win_ping:

...
